version: '3.8'

services:
  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: bsky-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - bsky-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Services
  postgres:
    image: postgres:15
    container_name: bsky-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./configs/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./backups/postgres:/backups
    networks:
      - bsky-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: bsky-redis-prod
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/etc/redis/redis.conf:ro
      - ./backups/redis:/backups
    networks:
      - bsky-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Core Services
  account-manager:
    build:
      context: ./services/account-manager
      dockerfile: Dockerfile.prod
    container_name: bsky-account-manager-prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=require
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SERVICE_PORT=8001
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS_PER_MINUTE=60
    volumes:
      - ./logs/account-manager:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bsky-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  proxy-manager:
    build:
      context: ./services/proxy-manager
      dockerfile: Dockerfile.prod
    container_name: bsky-proxy-manager-prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=require
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - SERVICE_PORT=8002
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
      - PROXY_HEALTH_CHECK_INTERVAL=60
      - MAX_CONCURRENT_HEALTH_CHECKS=10
    volumes:
      - ./logs/proxy-manager:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bsky-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.prod
    container_name: bsky-api-gateway-prod
    environment:
      - ENVIRONMENT=production
      - ACCOUNT_MANAGER_URL=http://account-manager:8001
      - PROXY_MANAGER_URL=http://proxy-manager:8002
      - SERVICE_PORT=8000
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - RATE_LIMIT_ENABLED=true
    volumes:
      - ./logs/api-gateway:/app/logs
    depends_on:
      account-manager:
        condition: service_healthy
      proxy-manager:
        condition: service_healthy
    networks:
      - bsky-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: bsky-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - bsky-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: bsky-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - bsky-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bsky-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
